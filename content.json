[{"title":"前端模块化","date":"2018-11-29T14:25:56.000Z","path":"2018/11/29/frontend-module/","text":"一、AMD规范https://github.com/amdjs/amdjs-api","tags":[{"name":"module","slug":"module","permalink":"https://kagol.github.io/tags/module/"}]},{"title":"Webpack入门——使用Webpack打包Angular项目的一个例子","date":"2017-02-24T06:57:38.000Z","path":"2017/02/24/webpack-angular/","text":"一、什么是WebpackWebpack是一个前端的模块管理工具(module bundler)，以下是webpack的官网：http://webpack.github.io/，进入官网可以看到下面这张大图： 这张图基本上解释了webpack是用来干嘛的，将一些相互依赖的模块(文件)，打包成一个或多个js文件，减少http请求次数，提升性能。这些相互依赖的模块可以是图片、字体、coffee文件、样式文件、less文件等。 具体怎么用呢？接下来我将用一个例子来说明： 二、一个Webpack+Angular的例子1.项目的目录结构 2.安装Webpack及其他相关模块安装Webpack之前建议先安装Node.js，然后采用npm的方式来安装Webpack：npm install webpack -g因为要用到angular，所以要安装angular：npm install angular还要安装一系列加载器(loader)：npm install style-loader css-loader url-loader sass-loader raw-loader注意：除了webpack是全局安装之外，其他组件都是安装在app文件夹下面，会自动生成node_modules文件夹。 3.配置文件webpack.config.js12345678910111213141516module.exports = &#123; context: __dirname + &apos;/app&apos;,//上下文 entry: &apos;./index.js&apos;,//入口文件 output: &#123;//输出文件 path: __dirname + &apos;/app&apos;, filename: &apos;./bundle.js&apos; &#125;, module: &#123; loaders: [//加载器 &#123;test: /\\.html$/, loader: &apos;raw&apos;&#125;, &#123;test: /\\.css$/, loader: &apos;style!css&apos;&#125;, &#123;test: /\\.scss$/, loader: &apos;style!css!sass&apos;&#125;, &#123;test: /\\.(png|jpg|ttf)$/, loader: &apos;url?limit=8192&apos;&#125; ] &#125;&#125;; 4.入口文件index.js1234var angular = require(&apos;angular&apos;);//引入angularvar ngModule = angular.module(&apos;app&apos;,[]);//定义一个angular模块require(&apos;./directives/hello-world/hello-world.js&apos;)(ngModule);//引入指令(directive)文件require(&apos;./css/style.css&apos;);//引入样式文件 require用于引入外部模块(可以是对象，可以是函数，可以是css样式，可以是html页面等) 5.主页面index.html123456789101112&lt;!DOCTYPE html&gt;&lt;html ng-app=&quot;app&quot;&gt;&lt;head lang=&quot;en&quot;&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Angular with Webpack&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Angular + Webpack&lt;/h1&gt; &lt;hello-world&gt;&lt;/hello-world&gt; &lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 可以看到主页面是非常干净清爽的，只引入了一个输出文件bundle.js，然后html标签里加了ng-app=&quot;app&quot;。 6.指令文件hello-world.js1234567891011121314151617module.exports = function(ngModule) &#123; ngModule.directive(&apos;helloWorld&apos;, helloWorldFn);//定义指令，对应页面中的&lt;hello-world&gt;&lt;/hello-world&gt; require(&apos;./hello-world.scss&apos;); function helloWorldFn() &#123; return &#123; restrict: &apos;E&apos;,//元素(element) scope: &#123;&#125;, template: require(&apos;./hello-world.html&apos;),//模板 //templateUrl: &apos;directives/hello-world/hello-world.html&apos;, controllerAs: &apos;vm&apos;,// &lt;=&gt; $scope.vm = &#123;greeting: &apos;你好，我是卡哥&apos;&#125; controller: function () &#123; var vm = this; vm.greeting = &apos;你好，我是卡哥，很高兴见到你&apos;; &#125; &#125; &#125;&#125; module.exports用于将模块(文件)作为一个接口(一般是一个函数)暴露给外部。 7.其他文件(style.css、hello-world.html、hello-world.scss)12345678910@font-face&#123; font-family: &apos;maozedong&apos;; src: url(../fonts/maozedong.ttf);&#125;body&#123; background: url(../images/longmao.jpg) yellowgreen; font-size: 24pt; color: #fff; font-family: &apos;maozedong&apos;;&#125; 123&lt;div class=&quot;hello-world&quot;&gt; &#123;&#123;vm.greeting&#125;&#125;&lt;/div&gt; 1234.hello-world &#123; color: red; border: 1px solid green;&#125; 8.编译和运行在命令行工具中输入：webpack，即可编译，这时我们会遇到第一个坑： 这个错误的关键行在”You may need an appropriate loader to handle the file type”，大概意思就是你的加载器(loader)不正确，可是我们明明安装上了所有的加载器啊，也在配置文件中引用了呀，我在网上找了很久都没找到问题所在，后来还是一位细心的同事帮我解决这个问题的，原来问题出在配置文件中的”module”下的”loader”应该是”loaders”，就因为少了一个”s”，浪费我一上午的时间。 修改过来之后，编译通过了，我们在浏览器中打开主页面index.html，这时遇到了第二个坑： 大概意思是你跨域了，不能加载hello-world.html这个文件，问题出在指令文件hello-world.js中的引用模板地址的代码：templateUrl: &#39;directives/hello-world/hello-world.html&#39; 在网上搜到一个解决办法，就是使用Node.js自带的的http-server，以下是server.js的代码： 123456var port = 8000, express = require(&apos;express&apos;), app = express();app.use(&apos;/&apos;, express.static(__dirname));app.listen(port);console.log(&apos;Now serving http://localhost:&apos; + port + &apos;/index.html&apos;); 使用之前要先安装express：npm install express，然后在命令行工具中输入node server.js开启服务，这时在浏览器中输入：localhost:8000/index.html即可访问主页面。 另外一个方法是用require的方式引入hello-world.html：template: require(&#39;./hello-world.html&#39;) 三、补充1.webpack命令的参数webpack -p表示对打包后的文件进行压缩webpack -w表示实时进行打包更新webpack -d表示提供source map，方便调试 2.实时监视文件变化webpack-dev-server可以提供实时监视文件变化的功能，使用之前先安装webpack-dev-server：npm install webpack-dev-server -g然后在命令行中输入：webpack-dev-server --progress --colors，显示以下结果： 这时在浏览器中输入：localhost:8080 or localhost:8080/webpack-dev-server，你对静态资源的任何改动都会直接反映到主页面中。 —————————————————————————- 华丽的分割线 —————————————————————————- 总结：这是一个Webpack+Angular的典型例子，包含了最基本的打包js文件、css文件、scss文件、图片、字体的方法。通过这几天对Webpack的学习，发现有关Webpack的资料确实是非常少的，百度百科和维基百科上甚至都没有这个词条。希望这篇文章可以帮助大家入门。 ————————————————————————— 2016.11.29更新 ————————————————————————— 有不少朋友表示照着教程来会报错，原因都不太一样，所以附上示例源码，大家看源码就知道哪里出问题了，有不懂的地方欢迎讨论。","tags":[{"name":"随笔","slug":"随笔","permalink":"https://kagol.github.io/tags/随笔/"},{"name":"Webpack","slug":"Webpack","permalink":"https://kagol.github.io/tags/Webpack/"},{"name":"Angular","slug":"Angular","permalink":"https://kagol.github.io/tags/Angular/"}]}]